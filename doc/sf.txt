==============================================================================
------------------------------------------------------------------------------
*sf.nvim* Salesforce development plugin
*SfNvim*

MIT License Copyright (c) 2024 Xi Xiao

------------------------------------------------------------------------------
                                                                    *Sf.setup()*
                               `Sf.setup`({opt})
Before using this plugin, it's mandatory to invoke this function by "require'sf'.setup()".
Parameters ~
{opt} `(table|nil)` Optional config table to overwrite default settings.

------------------------------------------------------------------------------
                                                             *Sf.get_target_org*
                              `Sf.get_target_org`
get the value of the plugin internal variable "target_org".
"target_org" is automatically set by |Sf.fetch_org_list| when Nvim is intitiated
or manually by |Sf.set_target_org|.

------------------------------------------------------------------------------
                                                            *Sf.covered_percent*
                              `Sf.covered_percent`
Display the Apex test coverage percent for the current Apex file

------------------------------------------------------------------------------
                                                             *Sf.copy_apex_name*
                              `Sf.copy_apex_name`
A convenient way to quickly copy file name trimming dot-after, e.g. copy "Hello" from "Hello.cls"

------------------------------------------------------------------------------
                                       *Sf.refresh_current_file_covered_percent*
                   `Sf.refresh_current_file_covered_percent`
get latest code coverage percentage info for the current Apex

------------------------------------------------------------------------------
                                                                *Sf.toggle_term*
                                `Sf.toggle_term`
Toggle the SFTerm float window.

------------------------------------------------------------------------------
                                                              *Sf.save_and_push*
                               `Sf.save_and_push`
Save the file in the current buffer and push to target_org.
Accepts one string parameter to add extra parameters.
For example, to add `-c` parameter, you can define hotkey as:
vim.keymap.set('n', '<leader>sg', require('sf').save_and_push('-c') end, { desc = 'custom key' })

------------------------------------------------------------------------------
                                                                 *Sf.push_delta*
                                `Sf.push_delta`
Run `sf project deploy start` against the target_org
Accepts one string parameter to add extra parameters.
For example, to add `-c` parameter, you can define hotkey as:
vim.keymap.set('n', '<leader>sg', require('sf').push_delta('-c') end, { desc = 'custom key' })

------------------------------------------------------------------------------
                                                                   *Sf.retrieve*
                                 `Sf.retrieve`
Retrieve the file in the current buffer from target_org.
Accepts one string parameter to add extra parameters.
For example, to add `-c` parameter, you can define hotkey as:
vim.keymap.set('n', '<leader>sg', require('sf').retrieve('-c') end, { desc = 'custom key' })

------------------------------------------------------------------------------
                                                             *Sf.retrieve_delta*
                              `Sf.retrieve_delta`
Run `sf project retrieve start` against the target_org
Accepts one string parameter to add extra parameters.
For example, to add `-c` parameter, you can define hotkey as:
vim.keymap.set('n', '<leader>sg', require('sf').retrieve_delta('-c') end, { desc = 'custom key' })

------------------------------------------------------------------------------
                                                           *Sf.retrieve_package*
                             `Sf.retrieve_package`
Retrieve the file in the current buffer as a manifest from target_org

------------------------------------------------------------------------------
                                                              *Sf.run_anonymous*
                               `Sf.run_anonymous`
Run the file in the current buffer as anonymous apex in target_org

------------------------------------------------------------------------------
                                                                  *Sf.run_query*
                                 `Sf.run_query`
Run the query defined in current buffer in target_org

------------------------------------------------------------------------------
                                                          *Sf.run_tooling_query*
                             `Sf.run_tooling_query`
Run the tooling API query defined in the current buffer in target_org

------------------------------------------------------------------------------
                                                       *Sf.run_highlighted_soql*
                           `Sf.run_highlighted_soql`
Run visual mode highlight selected text as SOQL in the term

------------------------------------------------------------------------------
                                                                     *Sf.cancel*
                                  `Sf.cancel`
Terminate the running command in SFTerm.

------------------------------------------------------------------------------
                                                              *Sf.go_to_sf_root*
                               `Sf.go_to_sf_root`
Enter the sf project root path in SFTerm.

------------------------------------------------------------------------------
                                                                        *Sf.run*
                                    `Sf.run`
Allows to pass the user defined command into SFTerm.

------------------------------------------------------------------------------
                                                             *Sf.fetch_org_list*
                              `Sf.fetch_org_list`
Run "sf org list" command under the hood and stores the org list.
If a target_org is found, the value is saved into "require('sf.util').target_org", an internal variable.

------------------------------------------------------------------------------
                                                             *Sf.set_target_org*
                              `Sf.set_target_org`
Display the list of available orgs, and allow to define the target_org.
Run "sf config set target-org" command under the hood to set the target_org.

------------------------------------------------------------------------------
                                                      *Sf.set_global_target_org*
                           `Sf.set_global_target_org`
Salesforce sf command allows users to define a global target_org.
Run "sf config set target-org --global " command under the hood.

------------------------------------------------------------------------------
                                                         *Sf.diff_in_target_org*
                            `Sf.diff_in_target_org`
Fetch the file in the current buffer from target_org and display in the Nvim diff mode.
The left window displays the target_org verison, the right window displays the remote org verison

------------------------------------------------------------------------------
                                                                *Sf.diff_in_org*
                                `Sf.diff_in_org`
Similar to |Sf.diff_in_target_org|, you can choose which org to diff with.
The left window displays the local verison, the right window displays the remote org verison

------------------------------------------------------------------------------
                                                                   *Sf.org_open*
                                 `Sf.org_open`
Open the target_org in browser

------------------------------------------------------------------------------
                                                      *Sf.org_open_current_file*
                           `Sf.org_open_current_file`
Open the current file in the target_org in browser

------------------------------------------------------------------------------
                                                                   *Sf.pull_log*
                                 `Sf.pull_log`
Get a list of logs from the org, and choose one to download and open

------------------------------------------------------------------------------
                                                    *Sf.get_current_package_dir*
                          `Sf.get_current_package_dir`
Returns the current package directory. By default, the plugin uses the default package from sfdx-project.json.
If no packages are found, falls back to the value specified in 'default_dir'. If multiple packages are available,
you can override the current working package using |Sf.set_current_package|

------------------------------------------------------------------------------
                                                    *Sf.set_current_package_dir*
                          `Sf.set_current_package_dir`
Set the current package directory.

------------------------------------------------------------------------------
                                                        *Sf.set_current_package*
                            `Sf.set_current_package`
Prompts the user for a package to use for the project. Only useful if you have multiple package directories in your
sfdx-project.json file.

------------------------------------------------------------------------------
                                                               *Sf.pull_md_json*
                               `Sf.pull_md_json`
Download metadata name list, e.g. Apex names, LWC names, StaticResource names, etc. as Json files into the the project root path "md" folder.

------------------------------------------------------------------------------
                                                        *Sf.list_md_to_retrieve*
                            `Sf.list_md_to_retrieve`
Choose a specific metadata file to retrieve.
Its popup list depends on data retrieved by |Sf.retrieve_metadata_lists| in prior.

------------------------------------------------------------------------------
                                                          *Sf.pull_md_type_json*
                             `Sf.pull_md_type_json`
Download metadata-type list, e.g. ApexClass, LWC, Aura, FlexiPage, etc. as a Json file into the project root path "md" folder.

------------------------------------------------------------------------------
                                                   *Sf.list_md_type_to_retrieve*
                         `Sf.list_md_type_to_retrieve`
Select a specific metadata-type to download all its files. For example, download all ApexClass files.
Its popup list depends on data retrieved by |Sf.pull_metadata_type_list| in prior.

------------------------------------------------------------------------------
                                                 *Sf.retrieve_apex_under_cursor*
                        `Sf.retrieve_apex_under_cursor`
Uses the word under the cursor as Apex name to attempt to retreive from the org.
A convenient way to quickly pull Apex into local.

------------------------------------------------------------------------------
                                                          *Sf.create_apex_class*
                             `Sf.create_apex_class`
Creates a new Apex Class using an input name or prompting the user to enter one

------------------------------------------------------------------------------
                                                         *Sf.create_aura_bundle*
                            `Sf.create_aura_bundle`
Creates a new Aura Bundle using an input name or prompting the user to enter one

------------------------------------------------------------------------------
                                                          *Sf.create_lwc_bundle*
                             `Sf.create_lwc_bundle`
Creates a new LWC Bundle using an input name or prompting the user to enter one

------------------------------------------------------------------------------
                                                             *Sf.create_trigger*
                              `Sf.create_trigger`
Creates an apex trigger using an input name or prompting the user to enter one

------------------------------------------------------------------------------
                                                           *Sf.open_test_select*
                             `Sf.open_test_select`
Open a top-split window to display the Apex tests in the current file.

------------------------------------------------------------------------------
                                                           *Sf.run_current_test*
                             `Sf.run_current_test`
Run the Apex test under the cursor.
It uses Treesitter to determine @IsTest method.

------------------------------------------------------------------------------
                                             *Sf.run_current_test_with_coverage*
                      `Sf.run_current_test_with_coverage`
Same as `run_current_test`, but with code coverage info in the result.

------------------------------------------------------------------------------
                                                 *Sf.run_all_tests_in_this_file*
                        `Sf.run_all_tests_in_this_file`
Run all Apex tests in the current Apex file.

------------------------------------------------------------------------------
                                   *Sf.run_all_tests_in_this_file_with_coverage*
                 `Sf.run_all_tests_in_this_file_with_coverage`
Run all Apex tests in the current Apex file, but with code coverage info in the result.

------------------------------------------------------------------------------
                                                          *Sf.repeat_last_tests*
                             `Sf.repeat_last_tests`
A convenient way to repeat the last executed Apex test command.

------------------------------------------------------------------------------
                                                            *Sf.run_local_tests*
                              `Sf.run_local_tests`
Run all local tests in target_org

------------------------------------------------------------------------------
                                                              *Sf.run_all_jests*
                               `Sf.run_all_jests`
Run all jest tests in project

------------------------------------------------------------------------------
                                                              *Sf.run_jest_file*
                               `Sf.run_jest_file`
Run all jest tests in current file

------------------------------------------------------------------------------
                                                                *Sf.toggle_sign*
                                `Sf.toggle_sign`
show sign icons to indicates uncovered lines from the latest test running result.

------------------------------------------------------------------------------
                                                     *Sf.uncovered_jump_forward*
                          `Sf.uncovered_jump_forward`
When code coverage sign icon is enabled on the current buffer, the cursor jumps to the next uncovered line

------------------------------------------------------------------------------
                                                    *Sf.uncovered_jump_backward*
                          `Sf.uncovered_jump_backward`
When code coverage sign icon is enabled on the current buffer, the cursor jumps to the previous uncovered line

------------------------------------------------------------------------------
                                                               *Sf.create_ctags*
                               `Sf.create_ctags`
Create tags file in the root path by using universal ctags cli tool.

------------------------------------------------------------------------------
                                                      *Sf.create_and_list_ctags*
                           `Sf.create_and_list_ctags`
Create tags file in the root path and list them by fzf plugin.
When fzf is not found, the command exists with an error msg.


==============================================================================
------------------------------------------------------------------------------
                                                                 *H.open_apex()*
                             `H.open_apex`({name})
Parameters ~
{name} `(string)`

------------------------------------------------------------------------------
                                                               *H.retrieve_md()*
                     `H.retrieve_md`({type}, {name}, {cb})
Parameters ~
{type} `(string)`
{name} `(string)`
{cb} `(function)`
Return ~
`(nil)`

------------------------------------------------------------------------------
                                                             *H.pull_metadata()*
                           `H.pull_metadata`({type})
Parameters ~
{type} `(string)`
Return ~
`(nil)`

------------------------------------------------------------------------------
                                                          *H.retrieve_md_type()*
                          `H.retrieve_md_type`({type})
Parameters ~
{type} `(string)`
Return ~
`(nil)`

------------------------------------------------------------------------------
                                                            *H.generate_class()*
                           `H.generate_class`({name})
Parameters ~
{name} `(string)`

------------------------------------------------------------------------------
                                                         *H.create_apex_class()*
                         `H.create_apex_class`({name})
Parameters ~
{name} `(string)`

------------------------------------------------------------------------------
                                                             *H.generate_aura()*
                           `H.generate_aura`({name})
Parameters ~
{name} `(string)`

------------------------------------------------------------------------------
                                                        *H.create_aura_bundle()*
                         `H.create_aura_bundle`({name})
Parameters ~
{name} `(string)`

------------------------------------------------------------------------------
                                                              *H.generate_lwc()*
                            `H.generate_lwc`({name})
Parameters ~
{name} `(string)`

------------------------------------------------------------------------------
                                                         *H.create_lwc_bundle()*
                         `H.create_lwc_bundle`({name})
Parameters ~
{name} `(string)`

------------------------------------------------------------------------------
                                                          *H.generate_trigger()*
                          `H.generate_trigger`({name})
Parameters ~
{name} `(string)`

------------------------------------------------------------------------------
                                                            *H.create_trigger()*
                           `H.create_trigger`({name})
Parameters ~
{name} `(string)`


==============================================================================
------------------------------------------------------------------------------
                                                                *H.store_orgs()*
                             `H.store_orgs`({data})
Parameters ~
{data} `(string)`

------------------------------------------------------------------------------
                                                                   *H.diff_in()*
                               `H.diff_in`({org})
Parameters ~
{org} `(string)`

------------------------------------------------------------------------------
                                           *H.get_file_name_without_extension()*
                `H.get_file_name_without_extension`({fileName})
Parameters ~
{fileName} `(string)`
Return ~
`(any)`

------------------------------------------------------------------------------
                                                         *H.get_metadata_type()*
                       `H.get_metadata_type`({filePath})
Parameters ~
{filePath} `(string)`
Return ~
`(string | nil)`

------------------------------------------------------------------------------
                                                                 *H.find_file()*
                        `H.find_file`({path}, {target})
Parameters ~
{path} `(string)`
{target} `(string)`
Return ~
`(string)`


==============================================================================
------------------------------------------------------------------------------
                                                       *Term.integrated_setup()*
                      `Term.integrated_setup`({term_cfg})
Parameters ~
{term_cfg} `(table)`

------------------------------------------------------------------------------
                                                         *Term.overseer_setup()*
                     `Term.overseer_setup`({overseer_cfg})
Parameters ~
{overseer_cfg} `(table)`


==============================================================================
------------------------------------------------------------------------------
                                                       *Test.run_current_test()*
                           `Test.run_current_test`()
Parameters ~
{cb} `(function)`
Return ~
`(nil)`

------------------------------------------------------------------------------
                                             *Test.run_all_tests_in_this_file()*
                    `Test.run_all_tests_in_this_file`({cb})
Parameters ~
{cb} `(function)`
Return ~
`(nil)`

------------------------------------------------------------------------------
                                                       *H.extract_test_run_id()*
                        `H.extract_test_run_id`({lines})
Parameters ~
{lines} `(table)`
Return ~
`(any)`

------------------------------------------------------------------------------
                                                *H.save_test_coverage_locally()*
           `H.save_test_coverage_locally`({self}, {cmd}, {exit_code})
Parameters ~
{self} `(table)`
{cmd} `(string)`
{exit_code} `(number)`

------------------------------------------------------------------------------
                                                           *P.build_tests_cmd()*
                        `P.build_tests_cmd`({param_str})
Parameters ~
{param_str} `(string)`
Return ~
`(nil)`


==============================================================================
------------------------------------------------------------------------------
                                                                      *M.show()*
                                `M.show`({msg})
Parameters ~
{msg} `(string)`

------------------------------------------------------------------------------
                                                                  *M.show_err()*
                              `M.show_err`({msg})
Parameters ~
{msg} `(string)`

------------------------------------------------------------------------------
                                                                 *M.show_warn()*
                              `M.show_warn`({msg})
Parameters ~
{msg} `(string)`

------------------------------------------------------------------------------
                                                         *M.notify_then_error()*
                          `M.notify_then_error`({msg})
Parameters ~
{msg} `(string)`

------------------------------------------------------------------------------
Returns a normalized path, optionally with a trailing separator

------------------------------------------------------------------------------
Returns the normalized default directory path

------------------------------------------------------------------------------
                                                            *M.is_table_empty()*
                           `M.is_table_empty`({tbl})
Parameters ~
{tbl} `(table)`

------------------------------------------------------------------------------
                                                              *M.is_empty_str()*
                             `M.is_empty_str`({s})
Parameters ~
{s} `(string|nil)`
Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                                 *M.list_find()*
                         `M.list_find`({tbl}, {value})
Parameters ~
{tbl} `(table)`
{value} `(string)`
Return ~
`(number|nil)`

------------------------------------------------------------------------------
                                                           *M.silent_job_call()*
               `M.silent_job_call`({cmd}, {msg}, {err_msg}, {cb})
Parameters ~
{cmd} `(string)`
{msg} `(string|nil)`
{err_msg} `(string|nil)`
{cb} `(function|nil)`

------------------------------------------------------------------------------
                                                                  *M.job_call()*
                  `M.job_call`({cmd}, {msg}, {err_msg}, {cb})
Parameters ~
{cmd} `(string)`
{msg} `(string|nil)`
{err_msg} `(string|nil)`
{cb} `(function|nil)`

------------------------------------------------------------------------------
                                                        *M.silent_system_call()*
             `M.silent_system_call`({cmd}, {msg}, {err_msg}, {cb})
Parameters ~
{cmd} `(table)`
{msg} `(string|nil)`
{err_msg} `(string|nil)`
{cb} `(function|nil)`

------------------------------------------------------------------------------
                                                               *M.system_call()*
           `M.system_call`({cmd}, {msg}, {err_msg}, {cb}, {pre_msg})
Parameters ~
{cmd} `(table)`
{msg} `(string|nil)`
{err_msg} `(string|nil)`
{cb} `(function|nil)`

------------------------------------------------------------------------------
                                                         *M.run_cb_with_input()*
                  `M.run_cb_with_input`({arg}, {prompt}, {cb})
Parameters ~
{arg} `(string|nil)`
{prompt} `(string)`
{cb} `(function)`

------------------------------------------------------------------------------
                                                     *M.table_to_string_lines()*
                        `M.table_to_string_lines`({tbl})
Parameters ~
{tbl} `(table)`
Return ~
`(string)`

------------------------------------------------------------------------------
                                                              *M.is_installed()*
                        `M.is_installed`({plugin_name})
Parameters ~
{plugin_name} `(string)`
Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                *M.read_file_in_plugin_folder()*
                     `M.read_file_in_plugin_folder`({name})
Parameters ~
{name} `(string)`
Return ~
`(table|nil)`

------------------------------------------------------------------------------
                                                     *M.read_file_json_to_tbl()*
                   `M.read_file_json_to_tbl`({name}, {path})
Parameters ~
{name} `(string)`
{path} `(string)`
Return ~
`(table|nil)`

------------------------------------------------------------------------------
                                                           *M.read_local_file()*
                 `M.read_local_file`({absolute_path}, {err_fn})
Reads the content of a local file.
@param absolute_path string The path to the file.
@param err_fn function|nil Optional function to call in case of an error.
@return string|nil The file content or nil if an error occurred.

------------------------------------------------------------------------------
                                                    *M.parse_from_json_to_tbl()*
                     `M.parse_from_json_to_tbl`({content})
Parameters ~
{content} `(string)`
Return ~
`(table|nil)`

------------------------------------------------------------------------------
                                                     *M.is_apex_loaded_in_buf()*
                       `M.is_apex_loaded_in_buf`({name})
Parameters ~
{name} `(string)`
Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                          *M.get_apex_buf_num()*
                          `M.get_apex_buf_num`({name})
Parameters ~
{name} `(string)`
Return ~
`(integer)`

------------------------------------------------------------------------------
                                                               *M.get_buf_num()*
                            `M.get_buf_num`({path})
Parameters ~
{path} `(string)`
Return ~
`(integer)`

------------------------------------------------------------------------------
                                                             *M.try_open_file()*
                           `M.try_open_file`({path})
Parameters ~
{path} `(string)`

------------------------------------------------------------------------------
                                                             *M.file_readable()*
                           `M.file_readable`({path})
Parameters ~
{path} `(string)`
Return ~
`(boolean)`

------------------------------------------------------------------------------
                                                               *M.is_function()*
                            `M.is_function`({param})
Parameters ~
{param} `(any)`
Return ~
`(boolean)`


==============================================================================
------------------------------------------------------------------------------
                                                                *CommandBuilder*
                                `CommandBuilder`
Class ~
{CommandBuilder}
Fields ~
{base_cmd} `(string)`
{command} `(string)`
{action} `(string)`
{subactions} `(table<string>)`
{params} `(table<string, table<string, string|boolean>>)`
{param_str} `(string)`
{org} `(string|nil)`

------------------------------------------------------------------------------
                                                          *CommandBuilder:new()*
                      `CommandBuilder:new`({base_command})
a new CommandBuilder instance
Parameters ~
{base_command} `(string|nil)`
Return ~
`(CommandBuilder)`

------------------------------------------------------------------------------
                                                          *CommandBuilder:cmd()*
                          `CommandBuilder:cmd`({cmd})
the command
Parameters ~
{cmd} `(string)`
Return ~
`(CommandBuilder)`

------------------------------------------------------------------------------
                                                          *CommandBuilder:act()*
                         `CommandBuilder:act`({action})
the action
Parameters ~
{action} `(string)`
Return ~
`(CommandBuilder)`

------------------------------------------------------------------------------
                                                       *CommandBuilder:subact()*
                      `CommandBuilder:subact`({subaction})
a sub-action
Parameters ~
{subaction} `(string)`
Return ~
`(CommandBuilder)`

------------------------------------------------------------------------------
                                                    *CommandBuilder:localOnly()*
                          `CommandBuilder:localOnly`()
the command local only
Return ~
`(CommandBuilder)`

------------------------------------------------------------------------------
                                                    *CommandBuilder:addParams()*
                       `CommandBuilder:addParams`({...})
one or more parameters
Parameters ~
{...} `(string|table)` Either a flag and value as separate arguments, or a table of flag-value pairs
Return ~
`(CommandBuilder)`

------------------------------------------------------------------------------
                                            *CommandBuilder:addParamsNoExpand()*
                   `CommandBuilder:addParamsNoExpand`({...})
one or more parameters, but don't expand the values
Parameters ~
{...} `(string|table)` Either a flag and value as separate arguments, or a table of flag-value pairs
Return ~
`(CommandBuilder)`

------------------------------------------------------------------------------
                                                  *CommandBuilder:addParamStr()*
                   `CommandBuilder:addParamStr`({param_str})
the param str. When params are given as string or the flag is the same for multiple params
Parameters ~
{param_str} `(string)`
Return ~
`(CommandBuilder)`

------------------------------------------------------------------------------
                                                      *CommandBuilder:set_org()*
                        `CommandBuilder:set_org`({org})
the org property
Parameters ~
{org} `(string)`
Return ~
`(CommandBuilder)`

------------------------------------------------------------------------------
                                                     *CommandBuilder:validate()*
                          `CommandBuilder:validate`()
the command

------------------------------------------------------------------------------
                                                   *CommandBuilder:sortParams()*
                         `CommandBuilder:sortParams`()
the params based on the specified rules
Return ~
`(table<integer, {flag: string, value: table<string, string|boolean>}>)`

------------------------------------------------------------------------------
                                                        *CommandBuilder:build()*
                            `CommandBuilder:build`()
the final command string
Return ~
`(string)`

------------------------------------------------------------------------------
                                                 *CommandBuilder:buildAsTable()*
                        `CommandBuilder:buildAsTable`()
the final command as a string table
Return ~
`(table)`


==============================================================================
------------------------------------------------------------------------------
                                                                 *M.sub_cmd_tbl*
                                `M.sub_cmd_tbl`
Type ~
`(table<string, {impl: fun(sub_cmd: string, arg: string): any, complete: fun(subcmd_arg_lead: string): string[], funcs: table<string, fun(...): any>}>)`

------------------------------------------------------------------------------
                                                               *create_sf_cmd()*
                            `create_sf_cmd`({opts})
Parameters ~
{opts} `(table)`


 vim:tw=78:ts=8:noet:ft=help:norl: